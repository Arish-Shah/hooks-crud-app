{"version":3,"sources":["components/Users.js","components/AddUser.js","components/EditUser.js","App.js","serviceWorker.js","index.js"],"names":["Users","props","react_default","a","createElement","Fragment","users","map","user","key","id","name","username","className","onClick","edited","deleted","AddUser","_useState","useState","_useState2","Object","slicedToArray","newUser","setNewUser","onSubmit","event","preventDefault","trim","added","type","value","onChange","objectSpread","target","EditUser","setUser","useEffect","preventDefaul","updated","update","cancelled","App","setUsers","_useState3","state","editingUser","_useState4","editing","setEditing","addOrUpdate","components_EditUser","updatedUsers","toConsumableArray","updateIndex","findIndex","el","components_AddUser","updatedUser","length","concat","components_Users","deleteIndex","splice","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bda02341.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Users = (props) => {\r\n  return (\r\n    <React.Fragment>\r\n      <h1>View users</h1>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Name</th>\r\n            <th>Username</th>\r\n            <th>Actions</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {\r\n            props.users.map(user => {\r\n              return (\r\n                <tr key={user.id}>\r\n                  <td>{user.name}</td>\r\n                  <td>{user.username}</td>\r\n                  <td>\r\n                    <button className=\"muted-button\"\r\n                      onClick={() => props.edited(user)}>Edit</button>\r\n                    <button className=\"muted-button\"\r\n                      onClick={() => props.deleted(user.id)}>Delete</button>\r\n                  </td>\r\n                </tr>\r\n              )\r\n            })\r\n          }\r\n        </tbody>\r\n      </table>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Users;","import React, { useState } from 'react';\r\n\r\nconst AddUser = (props) => {\r\n  const [newUser, setNewUser] = useState({ name: '', username: '' });\r\n\r\n  let formSubmitHandler = (event) => {\r\n    event.preventDefault();\r\n    if (newUser.name.trim() !== '' && newUser.username.trim() !== '') {\r\n      setNewUser({ name: '', username: '' });\r\n      props.added(newUser);\r\n    } else return;\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <h2>Add user</h2>\r\n      <form onSubmit={formSubmitHandler}>\r\n        <label>Name</label>\r\n        <input type=\"text\" name=\"name\" value={newUser.name}\r\n          onChange={event => setNewUser({ ...newUser, name: event.target.value })} />\r\n        <label>Username</label>\r\n        <input type=\"text\" name=\"username\" value={newUser.username}\r\n          onChange={event => setNewUser({ ...newUser, username: event.target.value })} />\r\n        <button>Add new User</button>\r\n      </form>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default AddUser;","import React, { useState, useEffect } from 'react';\r\n\r\nconst EditUser = (props) => {\r\n  const [user, setUser] = useState(props.user);\r\n\r\n  useEffect(() => {\r\n    setUser(props.user);\r\n  }, [props.user]);\r\n\r\n  let formSubmitHandler = (event) => {\r\n    event.preventDefaul();\r\n    if (user.name.trim() !== '' && user.username.trim() !== '') {\r\n      props.updated(user);\r\n    } else return;\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <h2>Edit user</h2>\r\n      <form onSubmit={formSubmitHandler}>\r\n        <label>Name</label>\r\n        <input type=\"text\" name=\"name\" value={user.name}\r\n          onChange={(event) => setUser({ ...user, name: event.target.value })} />\r\n        <label>Username</label>\r\n        <input type=\"text\" name=\"username\" value={user.username}\r\n          onChange={(event) => setUser({ ...user, username: event.target.value })} />\r\n        <button type=\"reset\" onClick={() => props.update(user)}>Update user</button>\r\n        <button className=\"muted-button\" onClick={props.cancelled}>Cancel</button>\r\n      </form>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default EditUser;","import React, { useState } from 'react';\r\n\r\nimport Users from './components/Users';\r\nimport AddUser from './components/AddUser';\r\nimport EditUser from './components/EditUser';\r\n\r\nconst App = () => {\r\n  //states\r\n  const [users, setUsers] = useState([\r\n    { id: 1, name: 'Arish Shah', username: 'arizh' },\r\n    { id: 2, name: 'Felix Kjell', username: 'pewdiepie' },\r\n    { id: 3, name: 'Ozair Khan', username: 'mok' }\r\n  ]);\r\n  const [editing, setEditing] = useState({ state: false, editingUser: null });\r\n\r\n  //handlers\r\n  let deleteHandler = (id) => {\r\n    let updatedUsers = [...users];\r\n    let deleteIndex = updatedUsers.findIndex(user => user.id === id);\r\n    updatedUsers.splice(deleteIndex, 1);\r\n    setUsers(updatedUsers);\r\n    setEditing({ state: false, editingUser: null });\r\n  }\r\n\r\n  let editHandler = (user) => {\r\n    setEditing({\r\n      state: true,\r\n      editingUser: {\r\n        id: user.id,\r\n        name: user.name,\r\n        username: user.username\r\n      }\r\n    });\r\n  }\r\n\r\n  let updateHandler = (user) => {\r\n    let updatedUsers = [...users];\r\n    let updateIndex = updatedUsers.findIndex(el => el.id === user.id);\r\n    updatedUsers[updateIndex] = user;\r\n    setUsers(updatedUsers);\r\n    setEditing({ state: false, editingUser: null })\r\n  }\r\n\r\n  let cancelHandler = () => {\r\n    setEditing({ state: false, editingUser: null });\r\n  }\r\n\r\n  let addHandler = (user) => {\r\n    let updatedUser = { ...user, id: users.length + 1 };\r\n    setUsers(users.concat(updatedUser));\r\n  }\r\n\r\n\r\n  let addOrUpdate = editing.state ?\r\n    <EditUser user={editing.editingUser} update={updateHandler} cancelled={cancelHandler} /> :\r\n    <AddUser added={addHandler} />;\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>CRUD App with Hooks</h1>\r\n      <div className=\"flex-row\">\r\n        <div className=\"flex-large\">\r\n          {addOrUpdate}\r\n        </div>\r\n        <div className=\"flex-large\">\r\n          <Users users={users} deleted={deleteHandler} edited={editHandler} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}